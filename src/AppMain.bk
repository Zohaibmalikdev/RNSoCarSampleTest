

import { Text, StyleSheet, View, Button, TextInput, Image, Alert, ScrollView, FlatList, SafeAreaView, TouchableOpacity, KeyboardAvoidingView } from 'react-native'
import React, { Component } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createDrawerNavigator } from '@react-navigation/drawer';
import 'react-native-gesture-handler';
import { firebase } from '@react-native-firebase/database';
import database from '@react-native-firebase/database';
import { firebaseConfig } from './config/firebaseConfig';
import { carData } from './services/data/carsData';
import { useIsFocused } from '@react-navigation/native';

import Icon from 'react-native-vector-icons/Entypo';

//================== Navigator
const Stack = createNativeStackNavigator();
const Tab = createBottomTabNavigator();
const Drawer = createDrawerNavigator();
//================== Navigator

const __db__ = firebase.app().database(firebaseConfig.databaseURL);
const __firebaseUserId__ = 'User23';

//================== Stack Navigator

function CreatePostScreen({route, navigation}) {
  const [postText, setPostText] = React.useState('');
  return(
    <>
      <TextInput 
        multiline
        placeholder='Whats on your Mind?'
        style={{height:200, padding: 10, backgroundColor: 'white'}}
        value={postText}
        onChangeText={setPostText}
      />

      <Button
        title='Done'
        onPress={() => {
          // pass the params back to previous screen
          navigation.navigate({
            name: 'Home',
            params: {post: postText},
            merge: true
          })
        }}
      />
    </>
  )
}

function LogoTitle() {
  return (
    <Image
      style={{ width: 35, height: 35 }}
      source={{uri: 'https://reactnative.dev/img/tiny_logo.png'}}
      alt="test"
    />
  );
}

//================== Stack Navigator


// ================ Tab Navigator

function HomeScreenTab(params) {
  return(
    <Tab.Navigator initialRouteName='Root'>
      <Tab.Screen name='HomeTab' component={HomeTab} />
      <Tab.Screen name='Root' component={HomeDrawerContainer} options={{headerShown: false}} />
      <Tab.Screen name='CreatePost' component={CreatePostScreen} />
    </Tab.Navigator>
  )
}

function HomeTab(params) {
 

  return(
    <>
    <View style={{ alignItems: 'center', justifyContent: 'center'}}>
        <Text>
          Welcome Home!
        </Text>
    </View>
    </>
  )

}

function AddCarScreen({route, navigation}){
  function writeFirebaseData(data, cb) {
    const newRef = __db__.ref(`/cars/`).push();  //create auto generated key.

    data.id = newRef.key;  //new id 
    //prepare data to send to firebase. 
    data = carData.prepare_data(data);

    console.log(data, 'after transformed...')

    //set new data
    newRef.set(data).then(() => {
      if(cb){
        cb();
      }
      console.log('-----------------');
      console.log('--------Data UPdated------');
      console.log('-----------------');
      Alert.alert('Added Successfully');
    })
  }

  const __textStyle = {
    width: '75%', height: '5%'
  }
  const [name, setName] = React.useState('');
  const [location, setLocation] = React.useState('');
  const [description, setDescription] = React.useState('');
  const [price, setPrice] = React.useState(0);

  return (
    <>
    <View style={{ justifyContent: 'center', alignItems: 'center'}}>
      <Image source={require('./assets/images/car.png')} style={{width: 250, height: 250, resizeMode: 'center'}} />

      <TextInput style={__textStyle} placeholder='Car Name' value={name} onChangeText={setName}/>
      <TextInput style={__textStyle} placeholder='Parked Location' value={location} onChangeText={setLocation}/>
      <TextInput style={__textStyle} placeholder='Price per Day' value={price} onChangeText={setPrice}/>
      <TextInput style={__textStyle} placeholder='Car Description' value={description} onChangeText={setDescription}/>

      <Button title='Save Changes' onPress={() => {
          console.log('---------------------');
          console.info(`name: ${name}`, 'to be saved in firebase');
          console.info(`location: ${location}`, 'to be saved in firebase');
          console.info(`price: ${price}`, 'to be saved in firebase');
          console.log('---------------------');
        
        //TODO: not submit if the values are not there. 
        //TODO: navigate to previouse page, call refresh data.

        let data = {
          name, 
          location, 
          price, 
          description
        }
        writeFirebaseData(data, () => {
          setName('');
          setLocation('');
          setPrice(0);
          setDescription('');
          navigation.goBack();
        });
      }}/>
      <Button title="Back" onPress={() => navigation.goBack()} />

    </View>
    </>
  )
}

const lineSeperator = <View style={{ borderBottomColor: 'black', borderBottomWidth: StyleSheet.hairlineWidth, justifyContent: 'center',
  alignItems: 'center' }} />;


function ReserveCarScreen({route, navigation}) {
  const {params} = route;

  function updateFirebaseData(data, cb) {
    const ref = __db__.ref(`/cars/${data.id}`);  //create auto generated key.

    //prepare data to send to firebase. 
    data = carData.prepare_data(data);

    console.log(data, 'after transformed...updating.');
    //update data
    ref.update(data).then(() => {
      if(cb){
        cb();
      }
      console.log('-----------------');
      console.log('--------Data UPdated------');
      console.log('-----------------');
      Alert.alert('Updated Successfully');
    });
  }

  React.useEffect(() => {
    const {item} = params;
    if(item === undefined){ navigation.goBack(); }
    setName(item.name);
    setLocation(item.location);
    setPrice(item.price);
    setCurrency(item.currency);
    setDescription(item.description);

  }, [])

  const __textStyle = {
    width: '75%', height: '5%',
    marginVertical: 8
  }
  const [name, setName] = React.useState('');
  const [location, setLocation] = React.useState('');
  const [currency, setCurrency] = React.useState('');
  const [description, setDescription] = React.useState('');
  const [price, setPrice] = React.useState(0);
  const [days, setDays] = React.useState(0);
  const [userName, setUserName] = React.useState('');
  const [userPhoneNumber, setUserPhoneNumber] = React.useState('');

  console.log(params, '---params---')
  return(
    <>
    <ScrollView>
    <View style={{ justifyContent: 'center', alignItems: 'center'}}>
      <View style={[{ justifyContent: 'center', alignItems: 'center'} ,styles.card, styles.shadowProp]}>
        <Image source={require('./assets/images/car.png')} style={{width: 250, height: 125, resizeMode: 'center'}} />
        
      </View>
      
      <View style={[styles.card, styles.shadowProp]}>

        <View style={{flexDirection: 'row', marginBottom: 15}}>
          <Text style={{fontSize: 16, marginTop: 10}}>Name: </Text>
          <Text style={{fontSize: 16, fontWeight: 'bold', marginTop: 10}}>{name}</Text>
        </View>

        {lineSeperator}

        <View style={{flexDirection: 'row', marginBottom: 15}}>
          <Text style={{fontSize: 16, marginTop: 10}}>Price: </Text>
          <Text style={{fontSize: 16, fontWeight: 'bold', color: 'red', marginTop: 10}}>{currency} {price} / per day</Text>
        </View>

        {lineSeperator}

        <View style={{flexDirection: 'row', marginBottom: 15}}>
          <Text style={{fontSize: 16, marginTop: 10}}>Parked Location: </Text>
          <Text style={{fontSize: 16, fontWeight: 'bold', marginTop: 10}}>{location}</Text>
        </View>

        {lineSeperator}

        <View style={{flexDirection: 'column', marginBottom: 15}}>
          <Text style={{fontSize: 16, marginTop: 10}}>Description: </Text>
          <Text style={{fontSize: 16, fontWeight: 'bold', marginTop: 10}}>{description} {description} {description}</Text>
        </View>

        {lineSeperator}
        <TextInput style={[__textStyle, {height: 35}]} placeholder='Please Enter Days Here....' value={days} onChangeText={setDays}/>
        {lineSeperator}
        <TextInput style={[__textStyle, {height: 35}]} placeholder='Please Enter Your Name Here....' value={userName} onChangeText={setUserName}/>
        {lineSeperator}
        <TextInput style={[__textStyle, {height: 35}]} placeholder='Please Enter Your Phone Number Here....' value={userPhoneNumber} onChangeText={setUserPhoneNumber}/>
        {lineSeperator}

      {Number(days) !== 0 && 
        (<>
          <View style={{flexDirection: 'row', marginVertical: 15}}>
            <Text style={{fontSize: 16, fontWeight: 'bold'}}>Total: </Text>
            <Text style={{fontSize: 16, fontWeight: 'bold', color: 'red'}}>{currency} {price * days}</Text>
          </View>
          {lineSeperator}
        </>)}

        
    </View>

    <View style={{flexDirection: 'row', justifyContent: 'space-evenly', width: '100%', marginVertical: 20}}>
      <TouchableOpacity 
        style={[styles.button, styles.shadowProp]}
        onPress={() => {
          //days required.
          if(Number(days) === 0) {
            return Alert.alert("Please Enter Days To Reserve Car.")
          }

          if(userName.trim() === "" || userPhoneNumber.trim() === ""){
            return Alert.alert("Please Enter Your Info. To continue...")
          }


          console.log('---------------------');
          console.info(`name: ${name}`, 'to be saved in firebase');
          console.info(`location: ${location}`, 'to be saved in firebase');
          console.info(`price: ${price}`, 'to be saved in firebase');
          console.info(`days: ${days}`, 'to be saved in firebase');
          console.log('---------------------');
        
        //TODO: not submit if the values are not there. 
        //TODO: navigate to previouse page, call refresh data.

        let data = {
          id: params?.item?.id,
          name, 
          location, 
          price, 
          days,
          currency,
          is_reserved: true,
          reserved_start_time: Date.now(),
        }

        updateFirebaseData(data, () => {
          navigation.goBack();
        });

      }}>
        <Text>Reserve Car</Text>
      </TouchableOpacity>

      <TouchableOpacity style={[styles.button, styles.shadowProp]} onPress={() => navigation.goBack()}>
        <Text>Back</Text>
      </TouchableOpacity>

      </View>
    </View>
    </ScrollView>
    </>
  )
}

function ViewReserveCarScreen({route, navigation}) {

  return(
    <>
    <View style={{alignItems: 'center', margin:10}}>
        <Text>View Reserved Car</Text>
    </View>

    <View style={{ justifyContent: 'center', alignItems: 'center'}}>
      <Image source={require('./assets/images/car.png')} style={{width: 250, height: 250, resizeMode: 'center'}} />


    </View>
  </>
  )
  
}

// ================ Tab Navigator

// ================ Drawer Navigator



function HomeDrawerContainer({navigation}) {
  return(
    <Drawer.Navigator initialRouteName='Cars'>
      <Drawer.Screen name='Cars' component={CarListScreenDrawer} options={{
        headerRight: () => <Icon name="add-to-list" style={{margin: 10}} size={25}  onPress={() => {
          navigation.navigate('AddCar');
        }} />
      }} />
      <Drawer.Screen name='CompleteReservation' component={CompleteReservationScreenDrawer} options={{title: "Complete Reservations"}}/>
      <Drawer.Screen name='ActiveReservation' component={ActiveReservationScreenDrawer} options={{title: "Active Reservations"}}/>
    </Drawer.Navigator>
  )
}

function CompleteReservationScreenDrawer({route, navigation}) {
  return(
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button
        onPress={() => navigation.navigate('ActiveReservation')}
        title="Go to Active Reservations"
      />
    </View>
  )
}

function ActiveReservationScreenDrawer({route, navigation}) {
  const [carList, setCarList] = React.useState([]);
  const [refreshing, setRefreshing] = React.useState(false);
  const isFocused = useIsFocused();


  React.useEffect(() => {
    console.log('-----------------');
    console.log('updating list!');
    console.log('-----------------');
    getCarList();
  }, []);

  React.useEffect(() => {
    console.log('--isFocused--- callled', isFocused);
    if(isFocused){
      getCarList(); //make sure the list is always updated.
    }
  }, [isFocused])

  function getCarList() {
      setCarList([]);
      // getFirebaseData();
      getFirebaseDataMock();
      setRefreshing(false);
  }

  function getFirebaseDataMock(){
    setCarList(__data__);
  }

  function getFirebaseData() {
    const newRef = __db__.ref(`/cars/`).once('value');  //create auto generated key.
    newRef.then((snapshot) => {
      const __value = snapshot.val(); //Json Object.
      let __FirebaseObjectToArray = [];

      if(Object.keys(__value).length > 0) {
        Object.keys(__value).map(id => {
          __FirebaseObjectToArray.push({
            id: id, ...__value[id]
          })
        })
  
        setCarList(__FirebaseObjectToArray);
      }else{
        //TODO: Set the Message List iS Empty....
      }
      console.log('-----------------');
      console.log('--------Active Reservation Listed successfully------');
      console.log('-----------------');
    })
  }

  return(
    <>
    <SafeAreaView style={styles.container}>
      <FlatList
          data={carList}
          renderItem={({item}) => (
            <>
            {item.is_reserved === true && 
              <TouchableOpacity onPress={() => {
                if(item.is_reserved !== true) return;
                navigation.navigate('ViewReserveCar', {item});
              }}>
                <View style={styles.item}>
                <View style={[{flexDirection: 'row'}, styles.card, styles.shadowProp]}>
                    <Image source={require('./assets/images/car.png')} style={{width: 125, height: 75, resizeMode: 'center'}} />
                    
                    <View style={
                        {flexDirection: 'column', 
                         padding: 8, marginLeft: 10, 
                        }}>
                      {/* <Text>ID: {item.id}</Text> */}
                      <View style={{flexDirection: 'row'}}>
                        <Text style={{fontSize: 20}}>Name: </Text>
                        <Text style={{fontSize: 20}}>{item.name}</Text>
                      </View>
                      <View style={{flexDirection: 'row'}}>
                        <Text style={{fontSize: 16, fontWeight: 'bold', marginTop: 10}}>Price: </Text>
                        <Text style={{fontSize: 16, fontWeight: 'bold', color: 'red', marginTop: 10}}>{item.currency} {item.price} / per day</Text>
                      </View>
                    </View>
                  </View>
                </View>
              </TouchableOpacity>
            }
            </>
          )}
          onRefresh={() => {
            setRefreshing(true);
            getCarList();
          }}
          refreshing={refreshing}
        
        />
    </SafeAreaView>
    </>

  )
}

function CarListScreenDrawer({route, navigation}) {
  const [carList, setCarList] = React.useState([]);
  const [refreshing, setRefreshing] = React.useState(false);
  const isFocused = useIsFocused();

  React.useEffect(() => {
    console.log('-----------------');
    console.log('updating list!');
    console.log('-----------------');
    getCarList();
  }, []);

  React.useEffect(() => {
    console.log('--isFocused--- callled', isFocused);
    if(isFocused){
      getCarList(); //make sure the list is always updated.
    }
  }, [isFocused])

  function getCarList() {
      setCarList([]);
      // getFirebaseData();
      getFirebaseDataMock();
      setRefreshing(false);
  }

  function getFirebaseDataMock(){
    setCarList(__data__);
  }

  function getFirebaseData() {
    const newRef = __db__.ref(`/cars/`).once('value');  //create auto generated key.
    newRef.then((snapshot) => {
      const __value = snapshot.val(); //Json Object.
      let __FirebaseObjectToArray = [];

      if(Object.keys(__value).length > 0) {
        Object.keys(__value).map(id => {
          __FirebaseObjectToArray.push({
            id: id, ...__value[id]
          })
        })
  
        setCarList(__FirebaseObjectToArray);
      }else{
        //TODO: Set the Message List iS Empty....
      }
      console.log('-----------------');
      console.log('--------Cars Listed successfulyy------');
      console.log('-----------------');
    })
  }

  return(
    <>
    <SafeAreaView style={styles.container}>
      <FlatList
          data={carList}
          renderItem={({item}) => (
            <>
            {item.is_reserved !== true && 
              <TouchableOpacity onPress={() => {
                if(item.is_reserved === true) return;
                navigation.navigate('ReserveCar', {item});
              }}>
                <View style={styles.item}>
                  <View style={[{flexDirection: 'row'}, styles.card, styles.shadowProp]}>
                    <Image source={require('./assets/images/car.png')} style={{width: 125, height: 75, resizeMode: 'center'}} />
                    
                    <View style={
                        {flexDirection: 'column', 
                         padding: 8, marginLeft: 10, 
                        }}>
                      {/* <Text>ID: {item.id}</Text> */}
                      <View style={{flexDirection: 'row'}}>
                        <Text style={{fontSize: 20}}>Name: </Text>
                        <Text style={{fontSize: 20}}>{item.name}</Text>
                      </View>
                      <View style={{flexDirection: 'row'}}>
                        <Text style={{fontSize: 16, fontWeight: 'bold', marginTop: 10}}>Price: </Text>
                        <Text style={{fontSize: 16, fontWeight: 'bold', color: 'red', marginTop: 10}}>{item.currency} {item.price} / per day</Text>
                      </View>
                    </View>
                  </View>
                </View>
              </TouchableOpacity>
            }
            </>
          )}
          onRefresh={() => {
            setRefreshing(true);
            getCarList();
          }}
          refreshing={refreshing}
        
        />
    </SafeAreaView>
    </>
  )
}

// ================ Drawer Navigator

export default class App extends Component {
  render() {
    return (
      <View style={{ flex: 1 }}>
        <NavigationContainer>
          <Stack.Navigator 
            initialRouteName='Home' 
            screenOptions={{
                // headerTitle: (props) => <LogoTitle {...props}/>,
                // headerStyle: {backgroundColor: '#f4511e'},
                // headerTintColor: "#fff",
                // headerTitleStyle: {
                //   fontWeight: 'bold'
                // }
              }}>
            <Stack.Screen 
              name='Home' 
              component={HomeScreenTab} 
              options={{ 
                title: "My Home", 
                headerShown: false,
              }} 
            />

            <Stack.Screen 
              name='AddCar' 
              component={AddCarScreen} 
              options={{ 
                title: "Add Car", 
              }} 
            />

            <Stack.Screen 
              name='ReserveCar' 
              component={ReserveCarScreen} 
              options={{ 
                title: "Reserve Car", 
              }} 
            />  

            <Stack.Screen 
              name='ViewReserveCar' 
              component={ViewReserveCarScreen}
              options={{ 
                title: "View Reserved Car", 
              }}  />
          </Stack.Navigator>
        </NavigationContainer>
      </View>
    )
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'row'
  },
  image: {
    
  },
  item: {
    paddingBottom: 10,
    paddingTop: 10,
    paddingLeft: 10,
    paddingRight: 10,
    marginHorizontal: 0,
  },
  title: {
    fontSize: 32,
  },
  card: {
    backgroundColor: 'white',
    borderRadius: 8,
    paddingVertical: 25,
    paddingHorizontal: 25,
    width: '100%',
    marginVertical: 5,
  },
  shadowProp: {
    shadowColor: '#171717',
    shadowOffset: {width: -2, height: 4},
    shadowOpacity: 0.2,
    shadowRadius: 3,
    elevation: 20
  },
  lineSeperator: {
    height: '1%',
    width: '100%',
    color: 'black',
    backgroundColor: 'black'
  },
  button: {
    alignItems: 'center',
    backgroundColor: '#fff',
    padding: 15,
    width: '35%',
    borderRadius: 8,
  },
});




const __data__ = [
    {"currency": "RM", "description": "4 wheeler perfect for family", "id": "-NNRTzPsRdfvdt0fB_bGfsx", "is_rented": false, "is_reserved": false, "location": "Klcc park", "maxed_days": 10, "name": "Proton x50", "price": 150, "reserved_for_days": 0, "total": 0},
    {"currency": "RM", "description": "4 wheeler perfect for family", "id": "-NNRTzPsRdfvdt0fB_bGdfs", "is_rented": false, "is_reserved": false, "location": "Klcc park", "maxed_days": 10, "name": "Proton x70", "price": 170, "reserved_for_days": 0, "total": 0},
    {"currency": "RM", "description": "perfect ride for family", "id": "-NNRUsq76I87xE5Uivohgh", "is_rented": false, "is_reserved": true, "location": "Klcc Park", "maxed_days": 10, "name": "Proton Saga", "price": 80, "reserved_end_time": 1675861067623, "reserved_for_days": 4, "reserved_start_time": 1675515467623, "total": 320},
    {"currency": "RM", "description": "perfect ride for family", "id": "-NNRUsq34234xE5Uivohhg", "is_rented": false, "is_reserved": true, "location": "Klcc Park", "maxed_days": 10, "name": "Proton Myvi", "price": 60, "reserved_end_time": 1675861067623, "reserved_for_days": 4, "reserved_start_time": 1675515467623, "total": 320}

  ];